
machine:
  services:
    - docker

  # timezone:
  #   America/New_York # Set the timezone

  # # Version of ruby to use
  # ruby:
  #   version:
  #     1.8.7-p358-falcon-perf

  # Override /etc/hosts
  hosts:
    circlehost: 127.0.0.1
    dev.mycompany.com: 127.0.0.1

  # # Add some environment variables
  environment:
    CIRCLE_ENV: test
    DATABASE_URL: postgres://ubuntu:@127.0.0.1:5432/circle_test
    TOOLDIR: "$HOME/.bt"
    TPATH: "$PATH:$TOOLDIR/bin"
    DOCKERIMG: "centos:centos6.7"  #should match what's in your dockerfile, if you're using a dockerfile....
    OURIMG: "ourimg"  #just a tag we use internally to reference the image we build

## Customize checkout
checkout:
  post:
    - pwd
    - ls -la
    - ls -la ..
    - ls -la ~/


dependencies:
  cache_directories:
    - "~/docker"

  pre:
    - docker info && docker version
    # Cache our base Docker image to make builds faster
    - mkdir -p ~/docker
    - echo "Caching $DOCKERIMG"
    ## load, pull (to verify up to date), then save.
    - if [[ -e ~/docker/$DOCKERIMG.tar ]]; then docker load -i ~/docker/$DOCKERIMG.tar; fi && docker pull $DOCKERIMG && docker save $DOCKERIMG > ~/docker/$DOCKERIMG.tar
    - ls -l ~/docker
    # now build and cache our docker image - this will use our cached last build image as a base
    - echo "Building and caching $OURIMG"
    ## load, build (to make sure up to date), then save
    - if [[ -e ~/docker/$OURIMG.tar ]]; then docker load -i ~/docker/$OURIMG.tar; fi && docker build -t $OURIMG . && docker save $OURIMG > ~/docker/$OURIMG.tar
    - ls -l ~/docker
    ##a cache cleanup could be useful here... delete files that aren't base or ours
    ## no, this isn't whitespace safe....
    - echo "Cleaning docker image cache"
    - find ~/docker -type f -print | grep -Fv -e "$DOCKERIMG" -e "$OURIMG"|xargs rm -vf  #-f so it doesnt error if given empty list by retarded xargs.  and xargs -r isn't portable.
  override:
    ##do we really need these?  last ditch just in case?
    - docker pull $DOCKERIMG
    - docker build -t $OURIMG .
    - docker images  #so we have a record in the log of where we were.
#  post:
#    - docker build -t $OURIMG .




# dependencies:
#    pre:
# #     - npm install coffeescript # install from a different package manager
# #     - gem uninstall bundler # use a custom version of bundler
# #     - gem install bundler --pre
#     #clone is in here.
#     - bash install-bt.sh dsr-orchestration
#     - ls -l ~/.bt
#     - echo "$PATH"
#     - echo "$TPATH"
#     - $TOOLDIR/bin/bt help
#     - . $TOOLDIR/source-tools.sh
#     - echo "$PATH"
# #    -


test:
  override:
    - echo "We don't need no stinkin tests"
    - docker images
    - docker run $DOCKERIMG echo "we're testing on $DOCKERIMG"
    - docker run $OURIMG echo "we're testing on $OURIMG"
    ## ~ and $HOME does NOT work right here since it's the outside-container ~
    - docker run $OURIMG ls -al . / /build


deployment:
  prod:
    branch: /prod/
    commands:
      - echo "deploy to prod!"




# ## Customize dependencies
# dependencies:
#   pre:
#     - npm install coffeescript # install from a different package manager
#     - gem uninstall bundler # use a custom version of bundler
#     - gem install bundler --pre

#   override:
#     - bundle install: # note ':' here
#         timeout: 180 # fail if command has no output for 3 minutes

#   # we automatically cache and restore many dependencies between
#   # builds. If you need to, you can add custom paths to cache:
#   cache_directories:
#     - "custom_1"   # relative to the build directory
#     - "~/custom_2" # relative to the user's home directory

# ## Customize database setup
# database:
#   override:
#     # replace CircleCI's generated database.yml
#     - cp config/database.yml.ci config/database.yml
#     - bundle exec rake db:create db:schema:load

# ## Customize test commands
# test:
#   override:
#     - phpunit test/unit-tests # use PHPunit for testing
#   post:
#     - bundle exec rake jasmine:ci: # add an extra test type
#         environment:
#           RAILS_ENV: test
#           RACK_ENV: test

# ## Customize deployment commands
# deployment:
#   staging:
#     branch: master
#     heroku:
#       appname: foo-bar-123

# ## Custom notifications
# notify:
#   webhooks:
#     # A list of hashes representing hooks. Only the url field is supported.
#     - url: https://someurl.com/hooks/circle

#
machine:


branches:
  only:
    - none


language: none

#http://docs.shippable.com/integrations/imageRegistries/ecr/
integrations:
  hub:
    # - integrationName: ecr-integration
    #   type: ecr
    #   region: us-east-1
    #   agent_only: true
    - integrationName: showdownlive_build_ecr_rw
      type: ecr
      region: us-west-2

env:
  global:
    - ECR_PREFIX="569641690693.dkr.ecr.us-west-2.amazonaws.com"
##this is really the ECR repo....
    - IMAGE_NAME="$ECR_PREFIX/showdownlive_build"
    - TAG_PREFIX="${REPO_NAME}."  ##use project specific tags



build:

  pre_ci:
  # Used primarily if you need to use a custom image for your build or if you need to customize behavior of the default CI container.
# ##    pull first?
#     # - docker images --all | grep $ECR_PREFIX || true
#     - docker pull 085114940579.dkr.ecr.us-east-1.amazonaws.com/devexi:dsr-test-img
#     - cat $JOB_STATE/my_image.env
#     - ls -laR
#     - date
#     - echo "versionName=$BRANCH.$BUILD_NUMBER" >> $JOB_STATE/my_image.env
#     - cat $JOB_STATE/my_image.env
#     - docker build -t 085114940579.dkr.ecr.us-east-1.amazonaws.com/devexi:dsr-test-img .
#     - docker push 085114940579.dkr.ecr.us-east-1.amazonaws.com/devexi:dsr-test-img
#     # - docker images --all | grep $ECR_PREFIX || true

     - hostname
     - docker --version
     - docker images --all | grep $ECR_PREFIX || true
     - export IMAGE_TAG=${TAG_PREFIX}$BRANCH.$BUILD_NUMBER
     ## pull latest if available, then tag it to make it our build
     - (docker pull ${IMAGE_NAME}:${TAG_PREFIX}latest && docker tag $IMAGE_NAME:${TAG_PREFIX}latest $IMAGE_NAME:$IMAGE_TAG)|| true
     - docker images --all | grep $ECR_PREFIX || true
     - echo "building and pushing $IMAGE_NAME:$IMAGE_TAG"
     ## --pull to pull pieces that are not cached instead of building them
     ## --rm=false to avoid purging from cache in case we hit this node again
     ## - < Dockerfile to avoid sending ./ as context to the build - we dont need it for docker build
     ## this alone is NOT adequate on a fresh node
     - docker build --pull --rm=false -t $IMAGE_NAME:$IMAGE_TAG - < Dockerfile
     ## now tag our fresh build - if it's fresh - as latest
     ## docker <1.10 required -f, docker >1.12 breaks with -f.  so try both instead of trying to do version testing.  we get different versions on different shippable build nodes
     - docker tag -f $IMAGE_NAME:$IMAGE_TAG $IMAGE_NAME:${TAG_PREFIX}latest || docker tag $IMAGE_NAME:$IMAGE_TAG $IMAGE_NAME:${TAG_PREFIX}latest
     ## this does internal change detection and wont push if it didnt change
     # - docker push $IMAGE_NAME:$IMAGE_TAG
     ## we only need latest, we dont need to push the build-specific image.
     - docker push $IMAGE_NAME:${TAG_PREFIX}latest
     - docker images --all | grep $ECR_PREFIX || true



  pre_ci_boot:
  # Used to override the default image used for CI with your own custom image. You can also set specific options for booting up the default CI container.
  #   image_name: aws-account-id.dkr.ecr.us-east-1.amazonaws.com/image-name
  #   image_tag: tip
  #   pull: true
  #   options: "-e HOME=/root"
    image_name: $IMAGE_NAME
    image_tag: $IMAGE_TAG
    #dont pull we built/pulled it up there.
    # pull: true
###on INTEGRATIONs not here.
    # agent_only: true
## no awscli, we dont do docker inside docker
#https://github.com/Shippable/support/issues/2945
#http://docs.shippable.com/tutorials/ci/hub-amazon-ecr-custom-ci-image/
      # - docker images --all | grep $ECR_PREFIX || true
      # - ls -laR
      # - cat $JOB_STATE/my_image.env


  ci:
    # - ls -laR
    - echo "yello"
    - ls -l /*build*
    - env | grep citesting
    # - echo "versionName=$BRANCH.$BUILD_NUMBER" >> $JOB_STATE/my_image.env
    # - cat $JOB_STATE/my_image.env
    # - date
    # - ls -la /test*
    # - cat /test*


#http://docs.shippable.com/tutorials/ci/hub-amazon-ecr-push-docker-image/
  post_ci:
    - ls -laR
    - cat $JOB_STATE/my_image.env
    # - docker push 085114940579.dkr.ecr.us-east-1.amazonaws.com/devexi:dsr-test-img
